openapi: '3.1.3'
info:
  title: CSF Portal Authentication & Authorization API
  version: 1.0.0
  description: |
    This is a Comprehensive API for user authentication and authorization. 

    This API is designed to handle user registration, login, MFA and token management, as well as role-based access control.

    It provides endpoints for creating new users, authenticating existing users, and managing user roles and permissions.

    The API is built using AWS Lambda functions and integrated with AWS Cognito for user management and authentication.
    It is designed to be scalable and secure, with a focus on user data protection and privacy.
    The API is designed to be used by a web application or other services that require user authentication and authorization.

    This is ***The Cometbid Software Foundation, CSF, Portal API*** documentation based on the OpenAPI 3.0 specification. You can test run the apis
    against our live server with a pre-defined request, and get instant feedback on whether there was an error in the request, or the server could not process the request for some other reasons.

    You can also test our APIs in the sandbox environment, where you can make changes and test the APIs with a more robust data without affecting the production environment.
    Our APIs are hosted on AWS, and we use the API Gateway service to manage the APIs. 

    We are constantly improving our APIs based on feedback from our users and will love to hear your feedbacks on how we can improve the API interface or format. 
    We use the OpenAPI specification to follow a design first approach in the implementation of this project!
    You can now help us improve the API whether it's by making changes to the definition itself or to the code:

    That way:
    - You can get access to the API first and offer your ideas for improvements to the API.
    - You have the benefit of using the API right away without waiting for the final release implementation.
    - With time, we can improve the API in general based on your feedback, and expose some of the new features quicker.

    Please send your feedbacks to email, **cometbid@cometbid.org**
    or visit our [support page](https://www.cometbid.org/support) to get in touch with us and if you have not done so already, join our community.
    We are looking forward to hearing from you.

    Thank you for your support!  
    **The CSF Team**  
    [The Cometbid Software Foundation Inc.](www.cometbid.org)

    Some useful links:
    - [The CSF's Portal Backend API repository](https://github.com/cometbid-sfi/csf-portal-backend)  
    - [The source API definition for the CSF's Portal BAckend appliation](https://github.com/cometbid-sfi/csf-portal-backend/blob/master/src/openapi.yaml)

  termsOfService: https://github.com/cometbid-sfi/csf-portal-backend/blob/main/LICENSE
  contact:
    name: The Cometbid Software Foundation Inc.
    url: http://www.cometbid.org/support
    email: support@cometbid.org
  license:
    name: MIT License
    url: https://github.com/cometbid-sfi/csf-portal-backend/blob/main/LICENSE
externalDocs:
  description: Visit our FAQ for any enquiries or get answers to common questions.
  url: http://www.cometbid.org/faq

servers:
  - url: https://{apiId}.execute-api.{region}.amazonaws.com/{stage}
    variables:
      apiId:
        default: your-api-id
        description: API Gateway ID
      stage:
        default: Prod
        description: API Deployment Stage

tags:
  - name: Authentication
    description: Authentication endpoints
  - name: Authorization
    description: Authorization and permission management
  - name: User Management
    description: User profile and account management operations
  - name: Account Recovery
    description: Account recovery and verification operations
  - name: Username Recovery
    description: Username recovery operations and verification
  - name: Session
    description: Session management operations
  - name: Password
    description: Password management operations
  - name: Profile
    description: User profile and attributes management
  - name: MFA
    description: Multi-factor authentication operations
  - name: MFA Management
    description: MFA configuration and management operations
  - name: MFA Verification
    description: MFA verification and challenge response operations
  - name: Token
    description: Token management operations
  - name: Phone Verification
    description: Phone verification workflow operations
  - name: Rate Limiting
    description: Rate limiting information and status

paths:
  /auth/signup:
    post:
      tags:
        - Authentication
      summary: Register a new user
      operationId: signUp
      x-amazon-apigateway-integration:
        uri: ${lambdaFunctions.signUpFunctionArn}
        httpMethod: POST
        type: aws_proxy
        payloadFormatVersion: "2.0"
        connectionType: INTERNET
      x-amazon-apigateway-throttling:
        rateLimit: 3
        burstLimit: 5
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/SignUpRequest"
      responses:
        "201":
          description: User successfully registered
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SignUpResponse"
        "400":
          description: Bad request
          content:
            application/json:
              schema:
                $ref: "#/components/responses/BadRequest"
        "409":
          description: Conflict
          content:
            application/json:
              schema:
                $ref: "#/components/responses/Conflict"
        "429":
          description: Too many requests
          content:
            application/json:
              schema:
                $ref: "#/components/responses/TooManyRequests"
        "500":
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: "#/components/responses/InternalServerError"
        "503":
          description: Service unavailable
          content:
            application/json:
              schema:
                $ref: "#/components/responses/ServiceUnavailable"

  /auth/confirm-signup:
    post:
      tags:
        - Authentication
      summary: Confirm user registration.
      operationId: confirmSignUp
      x-amazon-apigateway-integration:
        uri: ${lambdaFunctions.confirmSignUpFunctionArn}
        httpMethod: POST
        type: aws_proxy
        payloadFormatVersion: "2.0"
        connectionType: INTERNET
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ConfirmSignUpRequest"
      responses:
        "200":
          description: Email verification successful
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ConfirmSignUpResponse"
        "400":
          description: Bad request
          content:
            application/json:
              schema:
                $ref: "#/components/responses/BadRequest"

        "429":
          description: Too many requests
          content:
            application/json:
              schema:
                $ref: "#/components/responses/TooManyRequests"
        "500":
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: "#/components/responses/InternalServerError"
        "503":
          description: Service unavailable
          content:
            application/json:
              schema:
                $ref: "#/components/responses/ServiceUnavailable"

  /auth/signin:
    post:
      tags:
        - Authentication
      summary: Sign in user
      operationId: signIn
      x-amazon-apigateway-integration:
        uri: ${lambdaFunctions.signInFunctionArn}
        httpMethod: POST
        type: aws_proxy
        payloadFormatVersion: "2.0"
        connectionType: INTERNET
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/SignInRequest"
      responses:
        "200":
          description: Successfully authenticated
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SignInResponse"
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: "#/components/responses/Unauthorized"
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: "#/components/responses/Forbidden"
        "429":
          description: Too many requests
          content:
            application/json:
              schema:
                $ref: "#/components/responses/TooManyRequests"
        "500":
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: "#/components/responses/InternalServerError"

  /user/current:
    get:
      tags:
        - User Management
      summary: Get current user details
      description: Retrieve detailed information about the authenticated user
      operationId: getCurrentUser
      x-amazon-apigateway-integration:
        uri: ${lambdaFunctions.getCurrentUserFunctionArn}
        httpMethod: POST
        type: aws_proxy
        payloadFormatVersion: "2.0"
        connectionType: INTERNET
      security:
        - CognitoAuth: []
      parameters:
        - in: header
          name: SecurityScheme
          required: true
          description: Bearer token for authentication
          schema:
            type: string
            pattern: '^Bearer\s[\w-]+\.[\w-]+\.[\w-]+$'
          example: "Bearer eyJhbGciOiJIUzI1NiIs..."
      responses:
        "200":
          description: User details retrieved successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UserProfile"
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: "#/components/responses/Unauthorized"
        "404":
          description: User not found
          content:
            application/json:
              schema:
                $ref: "#/components/responses/NotFound"
        "500":
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: "#/components/responses/InternalServerError"              
components:
  schemas:
    UserProfile:
      type: object
      properties:
        userId:
          type: string
          description: Unique identifier for the user
        email:
          type: string
          format: email
        firstName:
          type: string
        lastName:
          type: string
        brandName:
          type: string
        phoneNumber:
          type: string
          pattern: '^\+[1-9]\d{1,14}$'
        emailVerified:
          type: boolean
        phoneVerified:
          type: boolean
        createdAt:
          type: string
          format: date-time
        lastLoginAt:
          type: string
          format: date-time
        preferences:
          type: object
          properties:
            language:
              type: string
            timezone:
              type: string
            notifications:
              type: object
              properties:
                email:
                  type: boolean
                sms:
                  type: boolean
        securitySettings:
          type: object
          properties:
            mfaEnabled:
              type: boolean
            lastPasswordChange:
              type: string
              format: date-time
            recoveryEmail:
              type: string
              format: email
    
    UsernameRecoveryRequest:
      type: object
      required:
        - firstName
        - lastName
        - brandName
      properties:
        firstName:
          type: string
          minLength: 1
          maxLength: 50
          pattern: '^[a-zA-Z\s-]+$'
          description: User's first name
        lastName:
          type: string
          minLength: 1
          maxLength: 50
          pattern: '^[a-zA-Z\s-]+$'
          description: User's last name
        brandName:
          type: string
          minLength: 1
          maxLength: 100
          description: User's brand name
        recaptchaToken:
          type: string
          description: Google reCAPTCHA token for verification
        preferredContactMethod:
          type: string
          enum: [EMAIL, SMS]
          description: Preferred method for receiving recovery information

    UsernameRecoveryResponse:
      type: object
      properties:
        success:
          type: boolean
        message:
          type: string
        username:
          type: string
          description: Recovered username (masked)
        rateLimitInfo:
          $ref: '#/components/schemas/RateLimitInfo'
    
    SignUpRequest:
      description: Request body for user sign-up
      type: object
      required:
        - email
        - password
        - firstName
        - lastName
      properties:
        email:
          type: string
          format: email
          description: Email address of the user
          pattern: '^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\.[a-zA-Z]{2,}$'
        password:
          type: string
          minLength: 8
          pattern: '^(?=.*[a-z])(?=.*[A-Z])(?=.*\d)(?=.*[@$!%*?&])[A-Za-z\d@$!%*?&]{8,}$'
          description: Must contain at least one uppercase letter, one lowercase letter, one number and one special character
        firstName:
          type: string
          minLength: 1
          description: First name of the user
        lastName:
          type: string
          minLength: 1
          description: Last name of the user
        phoneNumber:
          type: string
          pattern: '^\+[1-9]\d{1,14}$'
          description: Phone number of the user
          minLength: 1

    SignUpResponse:
      description: Response body for user sign-up
      type: object
      properties:
        userId:
          type: string
          description: Unique identifier for the user
        email:
          type: string
          description: Email address of the user
        verificationRequired:
          type: boolean
          description: Indicates if the user needs to verify their email address
        message:
          type: string
          description: Message describing the result of the sign-up attempt

    ConfirmSignUpRequest:
      type: object
      description: Request body for confirming a user's sign-up
      required:
        - email
        - code
      properties:
        email:
          type: string
          format: email
          description: Email address of the user
        code:
          type: string
          pattern: '^\d{6}$'
          description: 6-digit verification code sent to the user's email

    ConfirmSignUpResponse:
      description: Response body for confirming a user's sign-up
      type: object
      properties:
        success:
          type: boolean
          description: Indicates if the sign-up was successful
        message:
          type: string
          description: Message describing the result of the confirmation attempt

    SignInRequest:
      description: Request body for user sign-in
      type: object
      required:
        - email
        - password
      properties:
        email:
          type: string
          format: email
          description: Email address of the user
        password:
          type: string
          description: Password of the user
        deviceId:
          type: string
          description: Unique identifier for the device
        rememberMe:
          type: boolean
          description: Indicates if the user wants to stay signed in
          default: false

    SignInResponse:
      description: Response body for user sign-in
      type: object
      properties:
        accessToken:
          type: string
          description: JWT access token for the user
        refreshToken:
          type: string
          description: JWT refresh token for the user
        idToken:
          type: string
          description: JWT ID token for the user
        expiresIn:
          type: integer
          description: Number of seconds until the access token expires
        tokenType:
          type: string
          description: Type of token, always 'Bearer'
        mfaRequired:
          type: boolean
          description: Indicates if the user needs to complete multi-factor authentication
        mfaSession:
          type: string
          description: Session ID for the multi-factor authentication flow

    SignOutResponse:
      description: Response body for user sign-out
      type: object
      properties:
        success:
          type: boolean
          description: Indicates if the sign-out was successful
        message:
          type: string
          description: Message describing the result of the sign-out attempt

    ChangePasswordRequest:
      description: Request body for changing a user's password
      type: object
      required:
        - oldPassword
        - newPassword
      properties:
        oldPassword:
          type: string
          minLength: 8
          description: Current password of the user
        newPassword:
          type: string
          minLength: 8
          pattern: '^(?=.*[a-z])(?=.*[A-Z])(?=.*\d)(?=.*[@$!%*?&])[A-Za-z\d@$!%*?&]{8,}$'
          description: Must contain at least one uppercase letter, one lowercase letter, one number and one special character

    ChangePasswordResponse:
      description: Response body for changing a user's password
      type: object
      properties:
        success:
          type: boolean
          description: Indicates if the password change was successful
        message:
          type: string
          description: Message describing the result of the password change attempt

    PasswordResetRequest:
      description: Request body for initiating a password reset
      type: object
      required:
        - email
      properties:
        email:
          type: string
          format: email
          description: Email address of the user

    ForgotPasswordRequest:
      description: Request body for initiating the forgot password flow
      type: object
      required:
        - email
      properties:
        email:
          type: string
          format: email
          description: Email address of the user

    ForgotPasswordResponse:
      description: Response body for initiating the forgot password flow
      type: object
      properties:
        success:
          type: boolean
          description: Indicates if the reset code was sent successfully
        message:
          type: string
          description: Message describing the result of the forgot password attempt
        recoveryId:
          type: string
          description: Unique identifier for the recovery session
        expiresIn:
          type: integer
          description: Seconds until the recovery session expires
        deliveryMedium:
          type: string
          enum: [EMAIL, SMS]
          description: Medium through which the reset code was sent
        maskedDestination:
          type: string
          description: Masked email or phone number where verification code was sent

    PasswordResetResponse:
      description: Response body for initiating a password reset
      type: object
      properties:
        success:
          type: boolean
          description: Indicates if the reset code was sent successfully
        message:
          type: string
          description: Message describing the result of the reset password attempt
        recoveryId:
          type: string
          description: Unique identifier for the recovery session
        expiresIn:
          type: integer
          description: Seconds until the recovery session expires
        deliveryMedium:
          type: string
          enum: [EMAIL, SMS]
          description: Medium through which the reset code was sent
        maskedDestination:
          type: string
          description: Masked email or phone number where verification code was sent

    AccountRecoveryVerificationRequest:
      description: Request body for verifying a user's account recovery
      type: object
      required:
        - recoveryId
        - verificationCode
      properties:
        recoveryId:
          type: string
        verificationCode:
          type: string
          pattern: '^\d{6}$'
        recaptchaToken:
          type: string

    AccountRecoveryVerificationResponse:
      description: Response body for verifying a user's account recovery
      type: object
      properties:
        success:
          type: boolean
        message:
          type: string
        temporaryAccessToken:
          type: string
          description: Temporary token for password reset
        expiresIn:
          type: integer
          description: Seconds until the temporary token expires

    ConfirmResetPasswordRequest:
      description: Request body for resetting a user's password
      type: object
      required:
        - temporaryAccessToken
        - newPassword
      properties:
        temporaryAccessToken:
          type: string
        newPassword:
          type: string
          minLength: 8
          pattern: '^(?=.*[a-z])(?=.*[A-Z])(?=.*\d)(?=.*[@$!%*?&])[A-Za-z\d@$!%*?&]{8,}$'
          description: Must contain at least one uppercase letter, one lowercase letter, one number and one special character

    ConfirmForgotPasswordRequest:
      description: Request body for confirming the forgot password flow
      type: object
      required:
        - temporaryAccessToken
        - newPassword
      properties:
        temporaryAccessToken:
          type: string
        newPassword:
          type: string
          minLength: 8
          pattern: '^(?=.*[a-z])(?=.*[A-Z])(?=.*\d)(?=.*[@$!%*?&])[A-Za-z\d@$!%*?&]{8,}$'
          description: Must contain at least one uppercase letter, one lowercase letter, one number and one special character

    ResetPasswordResponse:
      description: Response body for confirming a user's password reset flow
      type: object
      properties:
        success:
          type: boolean
          description: Indicates if the password reset was successful
        message:
          type: string
          description: Message describing the result of the reset password attempt

    ConfirmForgotPasswordResponse:
      description: Response body for confirming the forgot password flow
      type: object
      properties:
        success:
          type: boolean
          description: Indicates if the password reset was successful
        message:
          type: string
          description: Message describing the result of the password reset attempt

    MFASetupResponse:
      description: Response body for setting up multi-factor authentication
      type: object
      properties:
        secretCode:
          type: string
          description: Base32 encoded secret key for the user
        qrCodeUrl:
          type: string
          description: URL for the QR code to be scanned by the user
        backupCodes:
          description: Backup codes are used in case the user cannot receive the QR code
          type: array
          items:
            type: string
            description: Backup code for the user

    UserAttributes:
      description: Response body for retrieving user attributes
      type: object
      properties:
        email:
          type: string
          format: email
          description: Email address of the user
        email_verified:
          type: boolean
          description: Indicates if the user's email address has been verified
        phone_number:
          type: string
          pattern: '^\+[1-9]\d{1,14}$'
          description: Phone number of the user
        phone_number_verified:
          type: boolean
          description: Indicates if the user's phone number has been verified
        given_name:
          type: string
          minLength: 1
          description: First name of the user
        family_name:
          type: string
          minLength: 1
          description: Last name of the user
        preferred_username:
          type: string
          minLength: 1
          description: Preferred username of the user
        locale:
          type: string
          description: Locale of the user
        zoneinfo:
          type: string
          description: Time zone of the user
        custom:
          type: object
          additionalProperties: true
          description: Custom attributes of the user

    UpdateUserAttributesRequest:
      description: Request body for updating user attributes
      type: object
      minProperties: 1
      properties:
        given_name:
          type: string
          description: First name of the user
        family_name:
          type: string
          description: Last name of the user
        phone_number:
          type: string
          pattern: '^\+[1-9]\d{1,14}$'
          description: Phone number of the user
        preferred_username:
          type: string
          description: Preferred username of the user
        locale:
          type: string
          description: Locale of the user
        zoneinfo:
          type: string
          description: Time zone of the user
        custom:
          type: object
          additionalProperties: true
          description: Custom attributes must be prefixed with "custom:" in the request

    UpdateUserAttributesResponse:
      description: Response body for updating user attributes
      type: object
      properties:
        success:
          type: boolean
          description: Indicates if the update was successful
        message:
          type: string
          description: Message describing the result of the update attempt
        verificationRequired:
          type: boolean
          description: Indicates if the user needs to verify their email address
        verificationAttributes:
          description: List of attributes that require verification
          type: array
          items:
            type: string
            enum: [email, phone_number]
            description: Attributes that require verification

    ResendMfaTokenRequest:
      description: Request body for resending the MFA token
      type: object
      required:
        - deliveryMedium
      properties:
        deliveryMedium:
          description: Medium through which the reset code was sent
          type: string
          enum: [EMAIL, SMS]

    ResendMfaTokenResponse:
      description: Response body for resending the MFA token
      type: object
      properties:
        success:
          type: boolean
          description: Indicates if the resend was successful
        message:
          type: string
          description: Message describing the result of the resend attempt
        deliveryMedium:
          type: string
          enum: [EMAIL, SMS]
          description: Medium through which the reset code was sent
        destination:
          type: string
          description: Masked email or phone number where code was sent

    VerifyMFARequest:
      description: Request body for verifying a user's MFA
      type: object
      required:
        - code
      properties:
        code:
          type: string
          pattern: '^\d{6}$'
          description: 6-digit verification code sent to the user
        session:
          type: string
          description: Session ID for the MFA verification

    VerifyMFAResponse:
      description: Response body for verifying a user's MFA
      type: object
      properties:
        success:
          type: boolean
          description: Indicates if the MFA verification was successful
        accessToken:
          type: string
          description: Access token for the user
        refreshToken:
          type: string
          description: Refresh token for the user
        idToken:
          type: string
          description: ID token for the user

    EmailVerificationRequest:
      description: Request body for verifying a user's email address
      type: object
      required:
        - email
        - code
      properties:
        email:
          type: string
          format: email
          description: Email address of the user
        code:
          type: string
          pattern: '^\d{6}$'
          description: 6-digit verification code sent to the user's email
        session:
          type: string
          description: Session ID for the MFA verification

    EmailVerificationResponse:
      description: Response body for verifying a user's email address
      type: object
      properties:
        success:
          type: boolean
          description: Indicates if the email verification was successful
        message:
          type: string
          description: Message describing the result of the email verification attempt

    RefreshTokenRequest:
      description: Request body for refreshing an access token
      type: object
      required:
        - refreshToken
      properties:
        refreshToken:
          type: string
          description: Refresh token for the user

    RefreshTokenResponse:
      description: Response body for refreshing an access token
      type: object
      properties:
        success:
          type: boolean
          description: Indicates if the token refresh was successful
        accessToken:
          type: string
          description: New access token for the user
        idToken:
          type: string
          description: New ID token for the user
        message:
          type: string
          description: Message describing the result of the token refresh attempt

    EnableMfaRequest:
      type: object
      description: Request body for enabling MFA
      required:
        - mfaType
      properties:
        mfaType:
          type: string
          enum: [SMS, EMAIL, TOTP]
          description: Type of MFA to enable
        phoneNumber:
          type: string
          pattern: '^\+[1-9]\d{1,14}$'
          description: Required if MFA type is SMS
        email:
          type: string
          format: email
          description: Required if MFA type is EMAIL

    EnableMfaResponse:
      description: Response body for enabling MFA
      type: object
      properties:
        success:
          type: boolean
          description: Indicates if the MFA was successfully enabled
        message:
          type: string
          description: Message describing the result of the enable MFA attempt
        secretCode:
          type: string
          description: TOTP secret code (only for TOTP MFA)
        qrCodeUrl:
          type: string
          description: QR code URL for TOTP setup
        backupCodes:
          type: array
          items:
            type: string
          description: Backup codes for account recovery

    DisableMfaRequest:
      description: Request body for disabling MFA
      type: object
      required:
        - mfaType
        - verificationCode
      properties:
        mfaType:
          type: string
          enum: [SMS, EMAIL, TOTP]
          description: Type of MFA to disable
        verificationCode:
          type: string
          pattern: '^\d{6}$'
          description: Verification code sent to user during MFA setup

    DisableMfaResponse:
      type: object
      description: Response body for disabling MFA
      properties:
        success:
          type: boolean
          description: Indicates if the MFA was successfully disabled
        message:
          type: string
          description: Message describing the result of the disable MFA attempt

    MfaPreferences:
      type: object
      description: MFA preferences for the user
      properties:
        enabledMethods:
          type: array
          items:
            type: string
            enum: [SMS, EMAIL, TOTP]
            description: List of enabled MFA methods
        preferredMethod:
          type: string
          enum: [SMS, EMAIL, TOTP]
          description: Preferred MFA method
        smsDetails:
          type: object
          properties:
            phoneNumber:
              type: string
              description: Masked phone number where verification code was sent
            verified:
              type: boolean
              description: Whether the phone number is verified
        emailDetails:
          type: object
          properties:
            email:
              type: string
              description: Masked email where verification code was sent
            verified:
              type: boolean
              description: Whether the email is verified
        totpEnabled:
          type: boolean
          description: Whether TOTP is enabled
        backupCodesRemaining:
          type: integer
          description: Number of remaining backup codes

    SetMfaPreferenceRequest:
      description: Request body for setting MFA preference
      type: object
      properties:
        preferredMethod:
          description: Preferred MFA method
          type: string
          enum: [SMS, EMAIL, TOTP]
        smsSettings:
          description: SMS settings for MFA
          type: object
          properties:
            enabled:
              description: Whether SMS is enabled as a preferred MFA method
              type: boolean
            phoneNumber:
              description: Phone number for SMS MFA
              type: string
              pattern: '^\+[1-9]\d{1,14}$'
        emailSettings:
          description: Email settings for MFA
          type: object
          properties:
            enabled:
              description: Whether email is enabled as a preferred MFA method
              type: boolean
            email:
              description: Email address for email MFA
              type: string
              format: email
        totpSettings:
          description: TOTP settings for MFA
          type: object
          properties:
            enabled:
              description: Whether TOTP is enabled as a preferred MFA method
              type: boolean

    SetMfaPreferenceResponse:
      description: Response body for setting MFA preference
      type: object
      properties:
        success:
          type: boolean
          description: Indicates if the MFA preference was successfully set
        message:
          type: string
          description: Message describing the result of the set MFA preference attempt
        verificationRequired:
          type: boolean
          description: Indicates if the user needs to verify their email address
        verificationDetails:
          description: List of attributes that require verification
          type: object
          properties:
            method:
              type: string
              enum: [SMS, EMAIL]
              description: Method that requires verification
            destination:
              type: string
              description: Masked phone number or email where verification code was sent

    MfaChallengeRequest:
      description: Request body for MFA challenge
      type: object
      required:
        - sessionId
        - challengeResponse
      properties:
        sessionId:
          description: Session ID for the MFA challenge
          type: string
        challengeResponse:
          description: Response to the MFA challenge
          type: string
          pattern: '^\d{6}$'
        deviceRemembered:
          type: boolean
          description: Whether to remember this device for future authentications

    MfaChallengeResponse:
      description: Response body for MFA challenge
      type: object
      properties:
        success:
          type: boolean
          description: Indicates if the MFA challenge was successful
        accessToken:
          type: string
          description: Access token for the user
        idToken:
          type: string
          description: ID token for the user
        refreshToken:
          type: string
          description: Refresh token for the user
        expiresIn:
          type: integer
          description: Number of seconds until the access token expires
        tokenType:
          type: string
          description: Type of token
          enum: [Bearer]

    TokenResponse:
      description: token response
      type: object
      properties:
        accessToken:
          description: Access token for the user
          type: string
        idToken:
          description: ID token for the user
          type: string
        refreshToken:
          description: Refresh token for the user
          type: string
        expiresIn:
          description: seconds remaining before the token expires
          type: integer
    
    InitiateVerificationRequest:
      description: Request body for initiating phone number verification
      type: object
      required:
        - phoneNumber
      properties:
        phoneNumber:
          type: string
          pattern: '^\+[1-9]\d{1,14}$'
          description: Phone number in E.164 format
        locale:
          type: string
          default: 'en'
          description: Preferred language for SMS
        channel:
          type: string
          enum: [SMS, CALL]
          default: SMS
          description: Verification channel
        recaptchaToken:
          type: string
          description: Google reCAPTCHA token

    InitiateVerificationResponse:
      description: Response body for initiating phone number verification
      type: object
      properties:
        success: 
          type: boolean
          description: Indicates if the phone number verification was initiated successfully
        message:
          type: string
          description: Message describing the result of the phone number verification initiation
        verificationId:
          type: string
          description: Unique identifier for verification session
        expiresIn:
          type: integer
          description: Seconds until verification code expires
        attemptsRemaining:
          type: integer
          description: Number of verification attempts remaining
        rateLimitInfo:
          $ref: '#/components/schemas/RateLimitInfo'

    VerifyPhoneRequest:
      description: Request body for verifying a phone number
      type: object
      required:
        - verificationId
        - code
      properties:
        verificationId:
          type: string
          description: Verification session identifier
        code:
          type: string
          pattern: '^\d{6}$'
          description: 6-digit verification code sent to the user's phone number
        session:
          type: string
          description: Session ID for the MFA verification

    VerifyPhoneResponse:
      description: Response body for verifying a phone number
      type: object
      properties:
        success:
          type: boolean
          description: Indicates if the phone number verification was successful
        message:
          type: string
          description: Message describing the result of the phone number verification
        verified:
          type: boolean
          description: Indicates if the phone number is verified
        verifiedAt:
          type: string
          format: date-time
          description: Time when the phone number was verified
        rateLimitInfo:
          $ref: '#/components/schemas/RateLimitInfo'
    
    ResendCodeRequest:
      description: Request body for resending a verification code
      type: object
      required:
        - verificationId
      properties:
        verificationId:
          type: string
          description: Verification session identifier
        channel:
          description: Verification channel
          type: string
          enum: [SMS, CALL]
          default: SMS
        recaptchaToken:
          type: string
          description: Google reCAPTCHA token

    ResendCodeResponse:
      description: Response body for resending a verification code
      type: object
      properties:
        success:
          type: boolean
          description: Indicates if the verification code was successfully resent
        message:
          type: string
          description: Message describing the result of the verification code resend
        expiresIn:
          type: integer
          description: Seconds until verification code expires
        attemptsRemaining:
          type: integer
          description: Number of verification attempts remaining
        rateLimitInfo:
          $ref: '#/components/schemas/RateLimitInfo'

    PhoneNumber:
      description: Phone number details
      type: object
      properties:
        phoneNumber:
          type: string
          pattern: '^\+[1-9]\d{1,14}$'
          description: Phone number 
        rateLimitInfo:
          $ref: '#/components/schemas/RateLimitInfo'

    PhoneNumberVerificationStatus:
      description: Response body for verification status
      type: object
      properties:
        phoneNumber:
          type: string
          pattern: '^\+[1-9]\d{1,14}$'
          description: Masked phone number where verification code was sent
        status:
          type: string
          enum: [PENDING, VERIFIED, FAILED, EXPIRED]
          description: Status of the verification
        verifiedAt:
          type: string
          format: date-time
          description: Time when the phone number was verified
        attemptsRemaining:
          type: integer
          description: Number of verification attempts remaining
        lastAttempt:
          type: string
          format: date-time
          description: Time when the last verification attempt was made
        expiresAt:
          type: string
          format: date-time
          description: Time when the verification code expires
        rateLimitInfo:
          $ref: '#/components/schemas/RateLimitInfo'

    RateLimitStatus:
      type: object
      properties:
        endpoints:
          type: object
          additionalProperties:
            $ref: '#/components/schemas/RateLimitInfo'

    RateLimitInfo:
      type: object            
      properties:
        message:
          type: string
          description: Error message
        limit:
          type: integer
          description: Maximum requests allowed in the time window
        remaining:
          type: integer
          description: Remaining requests in the current window
        reset:
          type: string
          format: date-time
          description: Time when the rate limit resets
        retryAfter:
          type: integer
          description: Seconds until next request is allowed (when limited)
        window:
          type: integer
          description: Time window in seconds
        resetTime:
          type: string
          format: date-time
          description: Time when the rate limit will be reset
          example: "2023-04-01T00:00:00Z"
    
    Error:
      description: Error response body
      type: object
      properties:
        code:
          description: Error code
          type: string
          enum:
            - BadRequest
            - Unauthorized
            - Forbidden
            - MaxAttemptReached
            - rateLimited
            - VerificationFailed
            - ExpiredCode
            - Conflict
            - InternalServerError
        message:
          type: string
          description: Error message
        details:
          type: object
          description: Additional error details
          additionalProperties: true
        rateLimitInfo:
          $ref: '#/components/schemas/RateLimitInfo'

  responses:
    SignUpSuccess:
      description: User successfully registered
      content:
        application/json:
          schema:
            type: object
            description: Success response for sign up requests
            properties:
              success:
                type: boolean
                description: Always true for successful sign up requests
              message:
                type: string
                description: Success message
              userId:
                type: string
                description: User ID of the newly registered user
              verificationRequired:
                type: boolean
                description: Whether email verification is required

    SignInSuccess:
      description: User successfully authenticated
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/TokenResponse"

    TokenRefreshSuccess:
      description: Token successfully refreshed
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/TokenResponse"

    SignOutSuccess:
      description: User successfully signed out
      content:
        application/json:
          schema:
            type: object
            description: Success response for sign out requests
            properties:
              success:
                type: boolean
                description: Always true for successful sign out requests
              message:
                type: string
                description: Success message

    PasswordResetSuccess:
      description: Password reset email sent
      content:
        application/json:
          schema:
            type: object
            description: Success response for password reset requests
            properties:
              success:
                type: boolean
                description: Always true for successful password reset requests
              message:
                type: string
                description: Success message

    EmailVerificationSuccess:
      description: Email successfully verified
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/EmailVerificationResponse"

    TooManyRequests:
      description: Rate limit exceeded
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/RateLimitInfo'

    BadRequest:
      description: Invalid request
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/Error"

    Unauthorized:
      description: Authentication required
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/Error"

    Forbidden:
      description: Permission denied
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/Error"

    Conflict:
      description: Resource already exists
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/Error"

    NotFound:
      description: Resource not found
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/Error"

    ServiceUnavailable:
      description: Service unavailable
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/Error"

    InternalServerError:
      description: Internal server error
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/Error"

  securitySchemes:
    BearerAuth:
      description: JWT Bearer Token
      type: http
      scheme: bearer
      bearerFormat: JWT
    CognitoAuth:
      description: Cognito User Pools Authorizer
      type: apiKey
      name: SecurityScheme
      in: header
      x-amazon-apigateway-authtype: jwt
      x-amazon-apigateway-authorizer:
        type: jwt
        jwtConfiguration:
          issuer: ${cognito_issuer}
          audience:
            - ${cognito_client_id}
        identitySource: $request.header.Authorization
      #x-amazon-apigateway-authorizer:
        #type: cognito_user_pools
        #providerARNs:
          #- arn:aws:cognito-idp:{region}:{account-id}:userpool/{user-pool-id}

# Rate limiting configuration
x-amazon-apigateway-gateway-responses:
  TOO_MANY_REQUESTS:
    statusCode: 429
    responseTemplates:
      application/json: |
        {
          "code": "RATE_LIMITED",
          "message": "Rate limit exceeded",
          "rateLimitInfo": {
            "limit": $context.rateLimit,
            "remaining": $context.remainingRequests,
            "reset": "$context.resetTime",
            "retryAfter": $context.retryAfter
          }
        }
    responseParameters:
      gatewayresponse.header.Retry-After: "'${context.retryAfter}'"
      gatewayresponse.header.X-RateLimit-Limit: "'${context.rateLimit}'"
      gatewayresponse.header.X-RateLimit-Remaining: "'${context.remainingRequests}'"
      gatewayresponse.header.X-RateLimit-Reset: "'${context.resetTime}'"