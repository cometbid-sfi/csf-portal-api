openapi: "3.0.3"
info:
  title: CSF Portal Authentication & Authorization API
  version: 1.0.0
  description: |
    This is a Comprehensive API for user authentication and authorization. 

    This API is designed to handle user registration, login, MFA and token management, as well as role-based access control.

    It provides endpoints for creating new users, authenticating existing users, and managing user roles and permissions.

    The API is built using AWS Lambda functions and integrated with AWS Cognito for user management and authentication.
    It is designed to be scalable and secure, with a focus on user data protection and privacy.
    The API is designed to be used by a web application or other services that require user authentication and authorization.

    This is ***The Cometbid Software Foundation, CSF, Portal API*** documentation based on the OpenAPI 3.0 specification. You can test run the apis
    against our live server with a pre-defined request, and get instant feedback on whether there was an error in the request, or the server could not process the request for some other reasons.

    You can also test our APIs in the sandbox environment, where you can make changes and test the APIs with a more robust data without affecting the production environment.
    Our APIs are hosted on AWS, and we use the API Gateway service to manage the APIs. 

    We are constantly improving our APIs based on feedback from our users and will love to hear your feedbacks on how we can improve the API interface or format. 
    We use the OpenAPI specification to follow a design first approach in the implementation of this project!
    You can now help us improve the API whether it's by making changes to the definition itself or to the code:

    That way:
    - You can get access to the API first and offer your ideas for improvements to the API.
    - You have the benefit of using the API right away without waiting for the final release implementation.
    - With time, we can improve the API in general based on your feedback, and expose some of the new features quicker.

    Please send your feedbacks to email, **cometbid@cometbid.org**
    or visit our [support page](https://www.cometbid.org/support) to get in touch with us and if you have not done so already, join our community.
    We are looking forward to hearing from you.

    Thank you for your support!  
    **The CSF Team**  
    [The Cometbid Software Foundation Inc.](www.cometbid.org)

    Some useful links:
    - [The CSF's Portal Backend API repository](https://github.com/cometbid-sfi/csf-portal-backend)  
    - [The source API definition for the CSF's Portal BAckend appliation](https://github.com/cometbid-sfi/csf-portal-backend/blob/master/src/openapi.yaml)

  termsOfService: https://github.com/cometbid-sfi/csf-portal-backend/blob/main/LICENSE
  contact:
    name: The Cometbid Software Foundation Inc.
    url: http://www.cometbid.org/support
    email: support@cometbid.org
  license:
    name: MIT License
    url: https://github.com/cometbid-sfi/csf-portal-backend/blob/main/LICENSE
externalDocs:
  description: Visit our FAQ for any enquiries or get answers to common questions.
  url: http://www.cometbid.org/faq

servers:
  - url: https://ecommerce.swagger.io/api/v1

tags:
  - name: Authentication
    description: Authentication endpoints
  - name: Authorization
    description: Authorization and permission management
  - name: Session
    description: Session management operations

paths:
  /auth/signup:
    post:
      tags:
        - Authentication
      summary: Register a new user
      operationId: signUp
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/SignUpRequest"
      responses:
        "201":
          description: User successfully registered
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SignUpResponse"
        "400":
          description: Bad request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BadRequest"
        "409":
          description: Conflict
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Conflict"
        "429":
          description: Too many requests
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TooManyRequests"
        "500":
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InternalServerError"
        "503":
          description: Service unavailable
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ServiceUnavailable"

  /auth/confirm-signup:
    post:
      tags:
        - Authentication
      summary: Confirm user registration.
      operationId: confirmSignUp
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ConfirmSignUpRequest"
      responses:
        "200":
          description: Email verification successful
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ConfirmSignUpResponse"
        "400":
          description: Bad request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BadRequest"

        "429":
          description: Too many requests
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TooManyRequests"
        "500":
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InternalServerError"
        "503":
          description: Service unavailable
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ServiceUnavailable"

  /auth/signin:
    post:
      tags:
        - Authentication
      summary: Sign in user
      operationId: signIn
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/SignInRequest"
      responses:
        "200":
          description: Successfully authenticated
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SignInResponse"
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Unauthorized"
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Forbidden"
        "429":
          description: Too many requests
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TooManyRequests"
        "500":
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InternalServerError"

components:
  schemas:
    UserProfile:
      type: object
      properties:
        userId:
          type: string
          description: Unique identifier for the user
        email:
          type: string
          format: email
        firstName:
          type: string
        lastName:
          type: string
        brandName:
          type: string
        phoneNumber:
          type: string
          pattern: '^\+[1-9]\d{1,14}$'
        emailVerified:
          type: boolean
        phoneVerified:
          type: boolean
        createdAt:
          type: string
          format: date-time
        lastLoginAt:
          type: string
          format: date-time
        preferences:
          type: object
          properties:
            language:
              type: string
            timezone:
              type: string
            notifications:
              type: object
              properties:
                email:
                  type: boolean
                sms:
                  type: boolean
        securitySettings:
          type: object
          properties:
            mfaEnabled:
              type: boolean
            lastPasswordChange:
              type: string
              format: date-time
            recoveryEmail:
              type: string
              format: email

    SignUpRequest:
      description: Request body for user sign-up
      type: object
      required:
        - email
        - password
        - firstName
        - lastName
      properties:
        email:
          type: string
          format: email
          description: Email address of the user
          pattern: '^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\.[a-zA-Z]{2,}$'
        password:
          type: string
          minLength: 8
          pattern: '^(?=.*[a-z])(?=.*[A-Z])(?=.*\d)(?=.*[@$!%*?&])[A-Za-z\d@$!%*?&]{8,}$'
          description: Must contain at least one uppercase letter, one lowercase letter, one number and one special character
        firstName:
          type: string
          minLength: 1
          description: First name of the user
        lastName:
          type: string
          minLength: 1
          description: Last name of the user
        phoneNumber:
          type: string
          pattern: '^\+[1-9]\d{1,14}$'
          description: Phone number of the user
          minLength: 1

    SignUpResponse:
      description: Response body for user sign-up
      type: object
      properties:
        userId:
          type: string
          description: Unique identifier for the user
        email:
          type: string
          description: Email address of the user
        verificationRequired:
          type: boolean
          description: Indicates if the user needs to verify their email address
        message:
          type: string
          description: Message describing the result of the sign-up attempt

    ConfirmSignUpRequest:
      type: object
      description: Request body for confirming a user's sign-up
      required:
        - email
        - code
      properties:
        email:
          type: string
          format: email
          description: Email address of the user
        code:
          type: string
          pattern: '^\d{6}$'
          description: 6-digit verification code sent to the user's email

    ConfirmSignUpResponse:
      description: Response body for confirming a user's sign-up
      type: object
      properties:
        success:
          type: boolean
          description: Indicates if the sign-up was successful
        message:
          type: string
          description: Message describing the result of the confirmation attempt

    SignInRequest:
      description: Request body for user sign-in
      type: object
      required:
        - email
        - password
      properties:
        email:
          type: string
          format: email
          description: Email address of the user
        password:
          type: string
          description: Password of the user
        deviceId:
          type: string
          description: Unique identifier for the device
        rememberMe:
          type: boolean
          description: Indicates if the user wants to stay signed in
          default: false

    SignInResponse:
      description: Response body for user sign-in
      type: object
      properties:
        accessToken:
          type: string
          description: JWT access token for the user
        refreshToken:
          type: string
          description: JWT refresh token for the user
        idToken:
          type: string
          description: JWT ID token for the user
        expiresIn:
          type: integer
          description: Number of seconds until the access token expires
        tokenType:
          type: string
          description: Type of token, always 'Bearer'
        mfaRequired:
          type: boolean
          description: Indicates if the user needs to complete multi-factor authentication
        mfaSession:
          type: string
          description: Session ID for the multi-factor authentication flow

    TokenResponse:
      description: token response
      type: object
      properties:
        accessToken:
          description: Access token for the user
          type: string
        idToken:
          description: ID token for the user
          type: string
        refreshToken:
          description: Refresh token for the user
          type: string
        expiresIn:
          description: seconds remaining before the token expires
          type: integer

    RateLimitInfo:
      type: object
      properties:
        message:
          type: string
          description: Error message
        limit:
          type: integer
          description: Maximum requests allowed in the time window
        remaining:
          type: integer
          description: Remaining requests in the current window
        reset:
          type: string
          format: date-time
          description: Time when the rate limit resets
        retryAfter:
          type: integer
          description: Seconds until next request is allowed (when limited)
        window:
          type: integer
          description: Time window in seconds
        resetTime:
          type: string
          format: date-time
          description: Time when the rate limit will be reset
          example: "2023-04-01T00:00:00Z"

    Error:
      description: Error response body
      type: object
      properties:
        code:
          description: Error code
          type: string
          enum:
            - BadRequest
            - Unauthorized
            - Forbidden
            - MaxAttemptReached
            - rateLimited
            - VerificationFailed
            - ExpiredCode
            - Conflict
            - InternalServerError
        message:
          type: string
          description: Error message
        details:
          type: object
          description: Additional error details
          additionalProperties: true
        rateLimitInfo:
          $ref: "#/components/schemas/RateLimitInfo"

    TooManyRequests:
      description: Rate limit exceeded
      properties:
        schema:
          $ref: "#/components/schemas/RateLimitInfo"

    BadRequest:
      description: Invalid request
      properties:
        schema:
          $ref: "#/components/schemas/Error"

    Unauthorized:
      description: Authentication required
      properties:
        schema:
          $ref: "#/components/schemas/Error"

    Forbidden:
      description: Permission denied
      properties:
        schema:
          $ref: "#/components/schemas/Error"
         
    Conflict:
      description: Resource already exists
      properties:
        schema:
          $ref: "#/components/schemas/Error"

    NotFound:
      description: Resource not found
      properties:
        schema:
          $ref: "#/components/schemas/Error"

    ServiceUnavailable:
      description: Service unavailable
      properties:
        schema:
          $ref: "#/components/schemas/Error"

    InternalServerError:
      description: Internal server error
      properties:
        schema:
          $ref: "#/components/schemas/Error"
